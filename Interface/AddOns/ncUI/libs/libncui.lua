-- holders --local _, lib = ...local db = ncUIdb["general"]local addon = CreateFrame("Frame")local noop = function() endlocal callbacks = {	["update"] = {},	["events"] = {},}-- localized for the speed --local floor = math.floor-- constants --lib.RESOLUTION = GetCVar("gxResolution")lib.RESOWIDTH, lib.RESOHEIGHT = string.match(lib.RESOLUTION, "(%d+)x(%d+)")lib.PP = 768/lib.RESOHEIGHT/db.uiscalelib.BACKDROP = {	bgFile = ncUIdb["media"].solid,	edgeFile = ncUIdb["media"].solid,	tile = false, tileSize = 0, edgeSize = lib.PP,	insets = {		left = -lib.PP,		right = -lib.PP,		top = -lib.PP,		bottom = -lib.PP,	}}-- hooks & events --function lib.Hook(tab, func, mode, hookfunc)	if type(tab)=="table" then		if not tab[func] then return end	else		hookfunc = mode		mode = func		func = tab		tab = _G	end	local orig = tab[func]	if mode=="pre" then		tab[func] = function(...)			hookfunc(...)			orig(...)		end	elseif mode=="pre-feed" then		tab[func] = function(...)			orig(hookfunc(...))		end	elseif mode=="post-feed" then		tab[func] = function(...)			hookfunc(orig(...))		end	else		tab[func] = function(...)			orig(...)			hookfunc(...)		end	endendfunction lib.RegisterEvent(event, handler)	if not callbacks.events[event] then		callbacks.events[event] = {}		addon:RegisterEvent(event)	end	local index = #callbacks.events[event] + 1	callbacks.events[event][index] = handler	return indexendfunction lib.UnregisterEvent(event, index)	if not callbacks.events[event] then return end	callbacks.events[event][index] = nil	if not next(callbacks.events[event]) then		callbacks.events[event] = nil		addon:UnregisterEvent(event)	endendfunction lib.RegisterUpdate(handler)	local index = #callbacks.update	callbacks.update[index] = handler	return indexendfunction lib.UnregisterUpdate(index)	callbacks.update[index] = nilend-- useful lua extensions --function lib.Unpack(tab)	local temp = {}	local index = 1	for _, val in next, tab do		temp[index] = val		index = index + 1	end	return unpack(temp)end-- math ---- localization --local hash = "f528764d%624*db1!$!@29b32c(@)21fbca0cb8d6" -- no one wants to translate thislib.L = setmetatable({[hash]={}}, {__index = function(tab, i)	local locale=GetLocale()	return lib.L[hash][locale] and tab[hash][locale][i] or iend})function lib:Localize(locale, translation)	lib.L[hash][locale] = lib.L[hash][locale] or {}	for key, val in next, translation do		lib.L[hash][locale][key] = val	endend-- graphics & frames --function lib.Destroy(obj)	if not obj.Show then return end	obj.Show = noop	obj:Hide()	if obj.UnregisterAllEvents then		obj:UnregisterAllEvents()	endendfunction lib.Round(num)	return floor(num + .5)endfunction lib.Scale(px)	return PP * floor(px + .5)endfunction lib.SpawnFont(obj, name, layer)	return obj:CreateFontString(name, layer or "OVERLAY", "ncUIfont")endfunction lib.SetTemplate(obj)	obj:SetBackdrop(lib.BACKDROP)	obj:SetBackdropColor(unpack(db.backdrop))	obj:SetBackdropBorderColor(unpack(db.border))endfunction lib.SetToolbox(obj)	obj.SetTemplate = lib.SetTemplate	obj.SpawnFont = lib.SpawnFont		lib:Hook(obj, "SetSize", "pre-feed", function(w, h)		if not h then h=w end		return lib:Scale(w), lib:Scale(h)	end)	lib:Hook(obj, "SetWidth", "pre-feed", function(w) return lib:Scale(w) end)	lib:Hook(obj, "SetHeight", "pre-feed", function(h) return lib:Scale(h) end)	lib:Hook(obj, "SetPoint", "pre-feed", function(...)		local point = {...}		for i=1, #point do			local px = tonumber(point[i])			if px then				point[i] = lib:Scale(px)			end		end		return unpack(point)	end)endfunction lib.CreateFrame(...)	local obj = CreateFrame(...)	lib:SetToolbox(obj)	return objend